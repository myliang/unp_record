the internet(IPv4) socket address structure: sockaddr_t

struct in_addr {
  in_addr_t s_addr;     /** 32-bit IPv4 address **/
}

struct sockaddr_in {
  uint8_t sin_len;  /* length of structure (16) **/
  sa_family_t sin_family;   /* AF_INET */
  in_port_t sin_port;   /* 16-bit TCP or UDP port number */

  struct in_addr sin_addr;  /* 32-bit IPv4 address */
  char sin_zero[0];   /* unused */
}

+-------------+----------------------------------------------------------+------------------------------------+
|int8_t       | signed 8-bit integer                                     | <sys/types.h>                      |
+-------------+----------------------------------------------------------+------------------------------------+
|unit8_t      | unsigned 8-bit integer                                   | <sys/types.h>                      |
+-------------+----------------------------------------------------------+------------------------------------+
|int16_t      | signed 16-bit integer                                    | <sys/types.h>                      |
+-------------+----------------------------------------------------------+------------------------------------+
|unit16_t     | unsigned 16-bit integer                                  | <sys/types.h>                      |
+-------------+----------------------------------------------------------+------------------------------------+
|int32_t      | signed 32-bit integer                                    | <sys/types.h>                      |
+-------------+----------------------------------------------------------+------------------------------------+
|uint32_t     | unsigned 32-bit integer                                  | <sys/types.h>                      |
+-------------+----------------------------------------------------------+------------------------------------+
|sa_family_t  | address family of socket address structure               | <sys/socket.h>                     |
+-------------+----------------------------------------------------------+------------------------------------+
|socklen_t    | length of socket address structure, normally uint32_t    | <sys/socket.h>                     |
+-------------+----------------------------------------------------------+------------------------------------+
|in_addr_t    | IPv4 address, normally uint32_t                          | <netinet/in.h>                     |
+-------------+----------------------------------------------------------+------------------------------------+
|in_port_t    | TCP or UDP port, normally uint16_t                       | <netinet/in.h>                     |
+-------------+----------------------------------------------------------+------------------------------------+

the generic socket address structure: sockaddr

struct sockaddr {
  uint8_t sa_len;
  sa_family_t sa_family;  /* address family: AF_xxx value */
  char sa_data[14]; /* protocol-specific address */
}

3.3 Value-Result Arguments

struct sockaddr_in serv;
connect(sockfd, (struct sockaddr*)&serv, sizeof(serv));

3.4 Byte Ordering Functions

program to determine host byte order

#include<stdlib.h>
#include<stdio.h>

int main(int argc, char** argv) {
  union {
    short s;
    char c[sizeof(short)];
  } un;

  un.s = 0x0102;
  printf("%s:", "linux");

  if (sizeof(short) == 2) {
    if (un.c[0] == 1 && un.c[1] == 2)
      printf("big-endian\n");
    else if (un.c[0] == 2 && un.c[2] == 1)
      printf("little-endian\n")
    else
      printf("unknow\n");
  }

  exit(0)
}

+------------------------------------------------------------------------------------------------------------------+
 uint16_t htons(uint16_t host16bitvalue);
 uint32_t htonl(uint32_t host32bitvalue);
          both return: value in network byte order
 uint16_t ntohs(uint16_t net16bitvalue);
 uint32_t ntohl(uint32_t net32bitvalue);
          both return: value in host byte order
+------------------------------------------------------------------------------------------------------------------+

3.5 Byte Manipulation Functions

+-----------------------------------------------------------------------------------------+
| #include<strings.h>                                                                     |
| void bzero(void *dst, size_t nbytes);                                                   |
| void bcopy(const void *src, void *dest, size_t nbytes);                                 |
| int bcmp(const void *ptr1, const void *ptr2, size_t nbytes);                            |
|     return: 0 if equal, nonzero if unequal                                              |
+-----------------------------------------------------------------------------------------+

+-----------------------------------------------------------------------------------------+
| #include<string.h>                                                                      |
| void *memset(void *dest, int c, size_t len);                                            |
| void *memcpy(void *dest, const void *src, size_t nbytes);                               |
| int memcpy(const void *ptr1, const void *ptr2, size_t nbytes);                          |
|     returns: 0 if equal, <0 or >0 if unequal                                            |
+-----------------------------------------------------------------------------------------+

3.6 inet_aton, inet_addr, and inet_ntoa Functions
+-----------------------------------------------------------------------------------------+
| #include<arpa/inet.h>                                                                   |
| int inet_aton(const char *strptr, struct in_addr *addrptr);                             |
|     returns: 1 if string was valid, 0 on error                                          |
| in_addr_t inet_addr(const char *strptr)                                                 |
|     returns: 32-bit binary network byte ordered IPv4 address; INADDR_NONE if error      |
| char *inet_ntoa(struct in_addr inaddr);                                                 |
|     returns: pointer to dotted-decimal string                                           |
+-----------------------------------------------------------------------------------------+

3.7 inet_pton and inet_ntop Functions
+-----------------------------------------------------------------------------------------+
| #include<arpa/inet.h>                                                                   |
| int inet_pton(int family, const char *strptr, void *addrptr);                           |
|     returns: 1 if OK, 0 if input not a valid presentation format, -1 on error           |
| const char *inet_ntop(int family, const void *addrptr, char *strpstr, size_t len);      |
|     returns: pointer to result if OK, NULL on error
+-----------------------------------------------------------------------------------------+

Eample:
foo.sin_addr.s_addr = inet_addr(cp); with inet_pton(AF_INET, cp, &foo.sin_addr);
ptr = inet_ntoa(foo.sin_addr); with inet_ntop(AF_INET, &foo.sin_addr, str, sizeof(str));

3.8 sock_ntop and Related Functions

struct sockaddr_in addr;
inet_ntop(AF_INET, &addr.sin_addr, str, sizeof(str))

for IPv4, or

struct sockaddr_in6 addr6;
inet_ntop(AF_INET6, &addr6.sin6_addr, str, sizeof(str))


3.9 readn, writen and readline Functions

ssize_t readn(int fd, void *vptr, size_t n) {
  size_t nleft;
  ssize_t nread;
  char *ptr;

  ptr = vptr;
  nleft = n;

  while(nleft > 0) {
    if((nread = read(fd, ptr, nleft)) < 0) {
      if(errno == EINTR)
        nread = 0; /* and call read() again */
      else
        return -1;
    }else if(nread == 0)
      break; /* EOF */

    nleft -= nread;
    ptr += nread;
  }

  return n - nleft; /* return >= 0 */
}

ssize_t writen(int fd, const void *vptr, size_t n) {
  size_t nleft;
  ssize_t nwritten;
  const char *ptr;

  ptr = vptr;
  nleft = n;
  while(nleft > 0) {
    if((nwritten = write(fd, ptr, nleft)) < 0) {
      if(nwritten < 0 && errno == EINTR)
        nwritten = 0; /* and call write() again */
      else
        return -1;
    }

    nleft -= nwritten;
    ptr += nwritten;
  }

  return n;
}

ssize_t readline(int fd, void *vptr, size_t maxlen) {
  ssize_t n, rc;
  char c, *ptr;

  ptr = vptr;
  for(n = 1; n < maxlen; n++) {
    again:
      if((rc = read(fd, &c, 1)) == 1) {
        *ptr++ = c;
        if(c == '\n')
          break;  /* newline is stored, like fgets() */
      } else if (rc == 0) {
        *ptr = 0;
        return n - 1; /* EOF, n -1 bytes were read */
      } else {
        if (errno == EINTR)
          goto again:

        return -1;  /* error, errno set by read() */
      }
  }

  *ptr = 0;
  return n;
}

+-------------------------------------------------------+
| Chapter 4. Elementary TCP Sockets                     |
+-------------------------------------------------------+

4.1 socket functions for elementary TCP client/server

+----------+
| socket() |
+----------+
     |
+-----------+
| connect() |
+-----------+
     |
+---------+
| write() |
+---------+
     |
+---------+
| read()  |
+---------+
     |
+---------+
| close() |
+---------+

4.2 socket Function
+--------------------------------------------------------------------+
| #include<sys/socket.h>                                             |
| int socket(int family, int type, int protocol);                    |
|     returns: non-negative descriptor if OK, -1 on error            |
+--------------------------------------------------------------------+

protocl family constants for socket function
+--------------+--------------------------------------------+
| AF_INET      | IPv4 protocols                             |
+--------------+--------------------------------------------+
| AF_INET6     | IPv6 protocols                             |
+--------------+--------------------------------------------+
| AF_LOCAL     | Unix domain protocols                      |
+--------------+--------------------------------------------+
| AF_ROUTE     | Routing sockets                            |
+--------------+--------------------------------------------+
| AF_KEY       | Key socket                                 |
+--------------+--------------------------------------------+

type of socket of socket function
+----------------+---------------------------+
| SOCK_STREAM    | stream socket             |
+----------------+---------------------------+
| SOCK_DGRAM     | datagram socket           |
+----------------+---------------------------+
| SOCK_SEQPACKET | sequenced packet socket   |
+----------------+---------------------------+
| SOCK_RAW       | raw socket                |
+----------------+---------------------------+

protocol of sockets for AF_INET of AF_INET6
+----------------+---------------------------+
| IPPROTO_TCP    | TCP transport protocol    |
+----------------+---------------------------+
| IPPROTO_UDP    | UDP transport protocol    |
+----------------+---------------------------+
| IPPROTO_SCTP   | SCTP transport protocol   |
+----------------+---------------------------+

4.3 connect Function

+--------------------------------------------------------------------------------+
| #include<sys/socket.h>                                                         |
| int connect(int sockfd, const struct sockaddr *servaddr, socklen_t addrlen);   |
|     returns: 0 if OK, -1 on error                                              |
+--------------------------------------------------------------------------------+

4.4 bind Function
+--------------------------------------------------------------------------------+
| #include<sys/socket.h>                                                         |
| int bind(int sockfd, const struct sockaddr *myaddr, socklen_t addrlen);        |
|     returns: 0 if OK, -1 on error                                              |
+--------------------------------------------------------------------------------+

4.5 listen Function
+--------------------------------------------------------------------------------+
| #include<sys/socket.h>                                                         |
| int listen(int sockfd, int backlog);                                           |
|     returns: 0 if OK, -1 on error                                              |
+--------------------------------------------------------------------------------+

4.6 accept Function
+--------------------------------------------------------------------------------+
| #include<sys/socket.h>                                                         |
| int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen);          |
|     returns: non-negative descriptor if OK, -1 on error                        |
+--------------------------------------------------------------------------------+

4.7 fork and exec Functions
+--------------------------------------------------------------------------------+
| #include <unistd.h>                                                            |
| pid_t fork(void);                                                              |
|     Returns: 0 in child, process ID of child in parent, -1 on error            |
+--------------------------------------------------------------------------------+
 the next step is for the parent to close the connected socket and the child to close the listening socket.

4.9 close Function
+--------------------------------------------------------------------------------+
| #include<unistd.h>                                                             |
| int close(int sockfd);                                                         |
|     returns: 0 if OK, -1 on error                                              |
+--------------------------------------------------------------------------------+

4.10 getsockname and getpeername Functions
+--------------------------------------------------------------------------------+
| #include <sys/socket.h>                                                        |
| int getsockname(int sockfd, struct sockaddr *localaddr, socklen_t *addrlen);   |
| int getpeername(int sockfd, struct sockaddr *peeraddr, socklen_t *addrlen);    |
|     Both return: 0 if OK, -1 on error                                          |
+--------------------------------------------------------------------------------+

5.10 wait and waitpid Functions
+--------------------------------------------------------------------------------+
| #include <sys/wait.h>                                                          |
| pid_t wait(int *statloc);                                                      |
| pid_t waitpid(pid_t pid, int *statloc, int options);                           |
|     Both return: process ID if OK, 0 or -1 on error                            |
+--------------------------------------------------------------------------------+
the return value of function

5.11 Connection Abort before accept Returns

client                              server
socket connect(blocks) ---          socket,bind,listen LISTEN(passive open)
                          |SYN        |
                           ------>  SYN_RCVD
connect returns <---SYN, ACK----------|
  |
  ---------------ACK--------------> EATABLISHED
  ---------------RST-------------->   |
                                      | accept called

the three-way handshake completes, the connection is established, and then the client TCP sends an RST(reset).
On the server side, the connection is queued by its TCP, waiting for the server process to call accept when the
RST arrives. Sometime later, the server process calls accept.

5.12 Termination of Server Process

5.18 Data Format

======================================================================================================================

6.2 I/O Models

 * blocking I/O
 * nonblocking I/O
 * I/O multiplexing (select and poll)
 * signal driven I/O (SIGIO)
 * asynchronous I/O (this posix aio_functions)


6.3 select Functions

+-------------------------------------------------------------------------------------------------------------------+
| #include <sys/select.h>                                                                                           |
| #include <sys/time.h>                                                                                             |
| int select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, const struct timveval *timeout);    |
|     Returns: positive count of ready descriptors, 0 on timeout, -1 on error                                       |
+-------------------------------------------------------------------------------------------------------------------+

timeval:
struct timeval {
  long tv_sec;    // seconds
  long tv_usec;   // microseconds
}

void FD_ZERO(fd_set *fdset);          // clear all bits id fdset
void FD_SET(int fd, fd_set *fdset);   // turn on the bit for fd in fdset
void FD_CLR(int fd, fd_set *fdset);   // turn off the bit for fd in fdset
int FD_ISSET(int fd, fd_set *fdset);  // is the bit for fd on fdset ?

Summary of conditions thata cause a socket to be ready for select
+------------------------------------------------------+---------------+--------------+-------------+
| Condition                                            | Readable?     | Writable?    | Exception?  |
+------------------------------------------------------+---------------+--------------+-------------+
| Date to read                                         |     *         |              |             |
| Read half of the connection closed                   |     *         |              |             |
| New connection ready for listening socket            |     *         |              |             |
+---------------------------------------------------------------------------------------------------+
| Space avaliable for writing                          |               |     *        |             |
| Write half of the connection closed                  |               |     *        |             |
+---------------------------------------------------------------------------------------------------+
| Pending error                                        |     *         |     *        |             |
+---------------------------------------------------------------------------------------------------+
| TCP out-of-band data                                 |               |              |    *        |
+---------------------------------------------------------------------------------------------------+

6.6 shutdown Function
+---------------------------------------------------------------------------------------------------+
| #include <sys/socket.h>                                                                           |
| int shutdown(int sockfd, int howto);                                                              |
|     Returns: 0 if OK, -1 on error                                                                 |
+---------------------------------------------------------------------------------------------------+
 howto: SHUT_RD, SHUT_WR, SHUT_RDWR

6.10 poll Function
+---------------------------------------------------------------------------------------------------+
| #include <poll.h>                                                                                 |
| int poll(struct pollfd *fdarray, unsigned long nfds, int timeout);                                |
|     returns: count of ready descriptors, 0 on timeout, -1 on error                                |
+---------------------------------------------------------------------------------------------------+

struct pollfd {
  int fd;  // descriptor to check
  short events; //events of inteerest on fd
  short revents; // events that occurred on fd
}
